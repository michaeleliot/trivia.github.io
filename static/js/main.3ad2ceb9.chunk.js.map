{"version":3,"sources":["components/TeamName/TeamName.js","components/Trivia/Trivia.js","components/ThankYou/ThankYou.js","components/Admin/Admin.js","App.js","serviceWorker.js","index.js"],"names":["TeamNameForm","styled","div","TeamName","history","useHistory","React","teamName","setTeamName","onSubmit","event","preventDefault","axios","post","then","response","console","log","data","question1","localStorage","setItem","JSON","stringify","clear","push","catch","e","htmlFor","type","name","value","onChange","target","blackAnswerForm","question2","question3","question4","question5","question6","question7","question8","question9","question10","TriviaFormWrapper","Trivia","getItem","parse","answerForm","setAnswers","updateField","ThankYouDiv","ThankYou","AdminDiv","Button","button","Admin","teamsList","setTeamsList","onClick","get","tmp","team","sort","a","b","score","map","i","key","App","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3ad2ceb9.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport axios from 'axios'\n\nconst url = process.env.NODE_ENV === 'production' ? \"/api/\" : \"http://localhost:5000/api\"\n\n\n\nconst TeamNameForm = styled.div`\n    height: 5em;\n    width: 40%;\n    position: absolute;\n    top:0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    text-align: center;\n    margin: auto;\n`\n\nexport default function TeamName() {\n    let history = useHistory();\n    const [teamName, setTeamName] = React.useState(\"\");\n    const formSubmit = function(event) {\n        event.preventDefault();\n        axios.post(`${url}/team`, {\n            teamName\n        })\n        .then(function(response) {\n            console.log(response)\n            if (response.data.question1)\n                localStorage.setItem('answers', JSON.stringify(response.data))\n            else {\n                console.log(\"cleaing local storage\")\n                localStorage.clear() \n            }\n            \n            localStorage.setItem('teamName', teamName);\n            history.push('/trivia')\n        })\n        .catch(function(e) {\n            console.log(e)\n        })\n    }\n\n    return (\n        <TeamNameForm>\n            <form onSubmit={formSubmit}>\n                <label htmlFor=\"team-name\">Team Name:</label>\n                <input type=\"text\" name=\"team-name\" value={teamName} onChange={e => setTeamName(e.target.value)}></input>\n                <input type=\"submit\" value=\"Submit\"></input>\n            </form> \n        </TeamNameForm>\n    )\n}","import * as React from 'react';\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport axios from 'axios'\nimport './trivia.css';\n\nconst url = process.env.NODE_ENV === 'production' ? \"/api/\" : \"http://localhost:5000/api\"\nconst blackAnswerForm = {\n    question1: '',\n    question2: '',\n    question3: '',\n    question4: '',\n    question5: '',\n    question6: '',\n    question7: '',\n    question8: '',\n    question9: '',\n    question10: '',\n}\n\nconst TriviaFormWrapper = styled.div`\n    width: 40%;\n    position: absolute;\n    background-color: grey;\n    top:0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    text-align: center;\n    margin: auto;\n    border-radius: 5px;\n    background-color: #ccc;\n    padding: 20px;\n    overflow: auto;\n`\n\nexport default function Trivia() {\n    let history = useHistory();\n    const [answerForm, setAnswers] = React.useState(() => {\n        const initialState = localStorage.getItem('answers') === null ? blackAnswerForm : JSON.parse(localStorage.getItem('answers'))\n        return initialState\n    })   \n    \n\n    const updateField = e => {\n        setAnswers({\n          ...answerForm,\n          [e.target.name]: e.target.value\n        });\n      };\n\n    const formSubmit = function(event) {\n        event.preventDefault();\n        console.log(JSON.stringify(answerForm))\n        localStorage.setItem('answers', JSON.stringify(answerForm))\n        axios.post(`${url}/answers`, {\n            answerForm,\n            teamName: localStorage.getItem('teamName')\n        })\n        .then(function(response) {\n            localStorage.setItem('score', response.data)\n            history.push('/thankyou')\n        })\n        .catch(function(e) {\n            console.log(e)\n        })\n    }\n    return (\n        <TriviaFormWrapper>\n            <form onSubmit={formSubmit}>\n                <label htmlFor=\"question1\"> Question 1:</label>\n                <input type=\"text\" name=\"question1\" value={answerForm.question1} onChange={updateField}></input>\n                <label htmlFor=\"question2\"> Question 2:</label>\n                <input type=\"text\" name=\"question2\" value={answerForm.question2} onChange={updateField}></input>\n                <label htmlFor=\"question3\"> Question 3:</label>\n                <input type=\"text\" name=\"question3\" value={answerForm.question3} onChange={updateField}></input>\n                <label htmlFor=\"question4\"> Question 4:</label>\n                <input type=\"text\" name=\"question4\" value={answerForm.question4} onChange={updateField}></input>\n                <label htmlFor=\"question5\"> Question 5:</label>\n                <input type=\"text\" name=\"question5\" value={answerForm.question5} onChange={updateField}></input>\n                <label htmlFor=\"question6\"> Question 6:</label>\n                <input type=\"text\" name=\"question6\" value={answerForm.question6} onChange={updateField}></input>\n                <label htmlFor=\"question7\"> Question 7:</label>\n                <input type=\"text\" name=\"question7\" value={answerForm.question7} onChange={updateField}></input>\n                <label htmlFor=\"question8\"> Question 8:</label>\n                <input type=\"text\" name=\"question8\" value={answerForm.question8} onChange={updateField}></input>\n                <label htmlFor=\"question9\"> Question 9:</label>\n                <input type=\"text\" name=\"question9\" value={answerForm.question9} onChange={updateField}></input>\n                <label htmlFor=\"question10\"> Question 10:</label>\n                <input type=\"text\" name=\"question10\" value={answerForm.question10} onChange={updateField}></input>\n                <input type=\"submit\" value=\"Submit\"></input>\n            </form> \n        </TriviaFormWrapper>\n    )\n}","import * as React from 'react';\nimport styled from 'styled-components'\n\nconst ThankYouDiv = styled.div`\n    height: 5em;\n    width: 40%;\n    position: absolute;\n    top:0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    text-align: center;\n    margin: auto;\n`\n\nexport default function ThankYou() {\n    return (\n        <ThankYouDiv>\n            Thank You {localStorage.getItem('teamName')}}. You're answers have been submitted.\n        </ThankYouDiv>\n    )\n}","import * as React from 'react';\nimport styled from 'styled-components'\nimport axios from 'axios'\n\nconst url = process.env.NODE_ENV === 'production' ? \"/api/\" : \"http://localhost:5000/api\"\n\nconst AdminDiv = styled.div`\n    height: 100%;\n    width: 40%;\n    position: absolute;\n    top:0;\n    left: 0;\n    right: 0;\n    margin: auto;\n`\n\nconst Button = styled.button`\n  background: black;\n  color: white;\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid black;\n  border-radius: 3px;\n  :hover {\n    background-color: grey;\n  }\n`;\n\nexport default function Admin() {\n    const [teamsList, setTeamsList] = React.useState([])\n\n    function byScore(a, b) {\n        return b.score - a.score\n    }\n\n    function refreshTeams() {\n        axios.get(`${url}/teams`)\n            .then(function(response) {\n                const tmp = []\n                for (const team in response.data) {\n                    tmp.push(response.data[team])\n                    console.log(tmp)\n                }\n                setTeamsList(tmp)\n            })\n            .catch(function(e) {\n                console.log(e)\n            })\n    }\n    \n    return (\n        <AdminDiv>\n            <Button onClick={refreshTeams}>Load Teams</Button>\n            <ul>\n                {teamsList.sort(byScore).map((team, i) => {\n                    return <li key={i}> {team.name} : {team.score} </li>\n                })}\n            </ul>\n        </AdminDiv>\n    )\n}","// src/App.js\nimport React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport { TeamName } from './components/TeamName'\nimport { Trivia } from './components/Trivia'\nimport { ThankYou } from './components/ThankYou'\nimport { Admin } from './components/Admin'\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n              <Switch>\n                <Route exact path='/' component={TeamName}/>\n                <Route exact path='/trivia' component={Trivia}/>\n                <Route exact path='/thankyou' component={ThankYou}/>\n                <Route exact path='/admin' component={Admin}/>\n              </Switch>\n            </div>\n        );\n    }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}